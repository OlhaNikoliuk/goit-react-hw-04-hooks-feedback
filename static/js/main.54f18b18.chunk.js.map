{"version":3,"sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/Statistics/Statistics.styled.js","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","Container","children","Feedback","Statistics","good","neutral","bad","total","positivePercentage","defaultProps","Button","BtnWrapper","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","type","styled","div","Title","p","Section","title","Message","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","totalVoutes","feedback","prev","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAEO,IAAMA,EAAO,qF,OCILC,MAJf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OAAO,cAACF,EAAD,UAAUE,KCDZ,IAAMC,EAAQ,4GCErB,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qCACE,eAACN,EAAD,oBAAiBE,KACjB,eAACF,EAAD,uBAAoBG,KACpB,eAACH,EAAD,mBAAgBI,KAChB,eAACJ,EAAD,qBAAkBK,KAClB,eAACL,EAAD,gCAA6BM,EAA7B,WAcNL,EAAWM,aAAa,CACtBD,mBAAoB,GAGPL,QC3BR,IAAMO,EAAM,4VA2BNC,EAAU,sFCHRC,I,IAAAA,EAtBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,cAACH,EAAD,UACGE,EAAQE,KAAI,SAAAC,GACX,OACE,cAACN,EAAD,CAEEO,QAAS,kBAAMH,EAAgBE,IAC/BE,KAAK,SAHP,SAKGF,GAJIA,S,eCRJjB,EAAUoB,IAAOC,IAAV,+PAiBPC,EAAQF,IAAOG,EAAV,gICHHC,MAZf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOvB,EAAY,EAAZA,SACxB,OACE,eAAC,EAAD,WACE,cAACoB,EAAD,UAAQG,IADV,IAC0BvB,MCLvB,IAAMwB,EAAO,8GCULC,MATf,YAAiC,IAAVC,EAAS,EAATA,QACrB,OAAO,cAACF,EAAD,UAAUE,KCiEJC,MA7Df,WACE,MAAwBC,mBAAS,GAAjC,mBAAOzB,EAAP,KAAa0B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOxB,EAAP,KAAgB0B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOvB,EAAP,KAAY0B,EAAZ,KAqBMC,EAAqB,WACzB,OAAO7B,EAAOC,EAAUC,GAQpB4B,EAAcD,IAEpB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAST,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEX,QAPgB,CAAC,OAAQ,UAAW,OAQpCC,gBAnCe,SAACqB,GACtB,OAAQA,GACN,IAAK,OACHL,GAAQ,SAACM,GAAD,OAAUA,EAAO,KACzB,MAEF,IAAK,UACHL,GAAW,SAACK,GAAD,OAAUA,EAAO,KAC5B,MAEF,IAAK,MACHJ,GAAO,SAACI,GAAD,OAAUA,EAAO,KACxB,MAEF,QACE,aAwBF,cAAC,EAAD,CAASZ,MAAO,YAAhB,SACGU,EAAc,EACb,cAAC,EAAD,CACE9B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO0B,IACPzB,mBAtBD6B,KAAKC,MAAL,UAAsB,IAAPlC,EAAc8B,MAyB9B,cAAC,EAAD,CAAcP,QAAS,4BClDlBY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.54f18b18.chunk.js","sourcesContent":["import styled from \"@emotion/styled/macro\";\n\nexport const Wrapper = styled.div`\n  padding: 30px 15px;\n  /* margin: 0 auto; */\n`;\n","import {Wrapper} from './Container.styled.js'\n\nfunction Container({ children }) {\n  return <Wrapper>{children}</Wrapper>;\n}\n\nexport default Container\n","import styled from \"@emotion/styled/macro\";\n\nexport const Feedback = styled.p`\n  font-size: 16px;\n  font-weight: 600;\n\n  color: #04267d;\n`;\n","import PropTypes from 'prop-types';\n\nimport {Feedback} from './Statistics.styled'\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      <Feedback>Good: {good}</Feedback>\n      <Feedback>Neutral: {neutral}</Feedback>\n      <Feedback>Bad: {bad}</Feedback>\n      <Feedback>Total: {total}</Feedback>\n      <Feedback>PositiveFeedback: {positivePercentage} &#37;</Feedback>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\n\nStatistics.defaultProps={\n  positivePercentage: 0,\n}\n\nexport default Statistics;\n","import styled from \"@emotion/styled/macro\";\n\nexport const Button = styled.button`\n  padding: 5px;\n  background-color: #fff;\n\n  font-size: 16px;\n  font-weight: 600;\n\n  border-radius: 4px;\n  border: 1px solid #283655;\n  color: #283655;\n\n  cursor: pointer;\n\n  transition: all 300ms linear;\n\n  &:not(:last-child) {\n    margin-right: 15px;\n  }\n\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n    background-color: #4d648d;\n    color: white;\n  }\n`;\n\nexport const BtnWrapper = styled.div`\n  align-items: center;\n`;\n","import PropTypes from 'prop-types';\n\nimport {Button, BtnWrapper} from './FeedbackOptions.styled.js'\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <BtnWrapper>\n      {options.map(option => {\n        return (\n          <Button\n            key={option}\n            onClick={() => onLeaveFeedback(option)}\n            type=\"button\"\n          >\n            {option}\n          </Button>\n        );\n      })}\n    </BtnWrapper>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\nexport default FeedbackOptions;\n","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  width: 300px;\n  height: 100%;\n  display: block;\n  padding: 20px;\n  border-radius: 4px;\n  text-align: center;\n\n  margin: 0 auto;\n\n  background-color: #d0e1f9;\n\n  &:not(:last-child) {\n    margin-bottom: 30px;\n  }\n`;\n\nexport const Title = styled.p`\n  margin: 0;\n  margin-bottom: 15px;\n  font-size: 24px;\n  font-weight: 600;\n\n  color: #283655;\n`;\n","import PropTypes from 'prop-types';\n\nimport {Wrapper, Title} from './Section.styled.js';\n\nfunction Section({ title, children }) {\n  return (\n    <Wrapper>\n      <Title>{title}</Title> {children}\n    </Wrapper>\n  );\n}\n\nSection.propTypes={\n  title: PropTypes.string,\n}\n\nexport default Section;\n\n","import styled from \"@emotion/styled/macro\";\n\nexport const Message = styled.p`\n  font-size: 16px;\n  font-weight: 600;\n\n  color: #04267d;\n`;\n","import PropTypes from 'prop-types';\nimport {Message} from './Notification.styled' \n\nfunction Notification({message}){\n  return(<Message>{message}</Message>)\n}\n\nNotification.propTypes={\n  message: PropTypes.string.isRequired,\n}\n\n\nexport default Notification;\n  ","import React, { useState } from \"react\";\n\nimport Container from \"./components/Container/Container\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleFeedback = (feedback) => {\n    switch (feedback) {\n      case \"good\":\n        setGood((prev) => prev + 1);\n        break;\n\n      case \"neutral\":\n        setNeutral((prev) => prev + 1);\n        break;\n\n      case \"bad\":\n        setBad((prev) => prev + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round(`${(good * 100) / totalVoutes}`);\n  };\n\n  const feedbackOptions = [\"good\", \"neutral\", \"bad\"];\n  const totalVoutes = countTotalFeedback();\n\n  return (\n    <Container>\n      <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions\n          options={feedbackOptions}\n          onLeaveFeedback={handleFeedback}\n        ></FeedbackOptions>\n      </Section>\n\n      <Section title={\"Statistic\"}>\n        {totalVoutes > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          ></Statistics>\n        ) : (\n          <Notification message={\"No feedback given\"} />\n        )}\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}